<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Josh Wills</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
</head>
<body>
<div>
<h2 id="leanpub-auto-josh-wills">Josh Wills</h2>

<h5 id="leanpub-auto-director-of-data-science-at--cloudera">Director of Data Science at  Cloudera</h5>

<p>
  <em>Mathematics, Ego Death and Becoming a Better Programmer</em>
</p>

<p>*Fascinated with the beauty of calculus at an early age, Josh Wills majored in pure math at Duke. His first introduction to statistics was in the final year of university, where despite some misgivings of it being not nearly as interesting as hyperbolic partial differential equations, he actually fell in love with the discipline. *</p>

<p>
  <em>After a brief stint at IBM, he returned to do a PhD in Operations Research at UT Austin, trying to solve NP-hard problems. Afterwards, he joined the startup world, working as a statistician first at Zilliant, then Indeed and finally Google.</em>
</p>

<p>
  <em>In this interview, Josh offers beautiful thoughts on the intersection of literature and data science, learning through humility and masochism, profound moments in open source projects, and the deep impact that Google’s engineering had on him. Josh Wills is currently the Senior Director of Data Science at Cloudera, where, according to him, he “makes data into awesome.”</em>
</p>

<h5 id="leanpub-auto-to-start-the-interview-wed-love-to-revisit-your-undergraduate-days-from-when-you-were-just-going-into-college-to-graduate-work-and-how-your-experiences-led-you-to-where-you-are-now">To start the interview, we’d love to revisit your undergraduate days, from when you were just going into college, to graduate work, and how your experiences led you to where you are now.</h5>

<p>I was a math major in college. The funny thing is that I never really liked math when I was growing up, even though I was pretty good at it. I was more into history and political science, until I got to high school and discovered calculus. I was enthralled. I loved calculus and felt that it was the first interesting piece of math that I had ever encountered.</p>

<p>I was a pretty big nerd in high school, which won’t be shocking to anyone. I did things like study for AP exams for classes I wasn’t actually taking. During my junior year, I took exams for AP Political Science and Comparative Government without actually taking the classes. I did well on those exams, so I ended up doing the same for Art History, Economics, and Physics during my senior year. I also read all of Calculus AB and BC in a semester, and then I got into multivariate calculus and proceeded to linear algebra, all on my own. I was just completely enthralled with the beauty of mathematics, the same way a person would appreciate a beautiful painting or work of art.</p>

<p>I ended up going to Duke University. The best part about Duke was that I got to take whatever math courses I wanted right away. My first course was graduate level topology. That was interesting because I was taking it with the other math freshman who were really good mathematicians. It became apparent to me relatively quickly that I while was good, the other freshmen were on another level altogether, which was very humbling. I think everyone runs into this at some point in life, and I felt relatively lucky that I encountered it during my freshman year because it gave me time to recover.</p>

<p>Anyway, I stuck with math, and I thought I was going to become a math professor. But I was also interested in many little side things- I did philosophy, economics for a while, and then  became interested in cognitive neuroscience. I was lucky enough to do a Research Experience for Undergraduates (REU) fellowship at Carnegie Mellon the summer after my sophomore year, modeling road and spatial navigation. That was my first introduction to real programming in MATLAB, building large models to simulate brain function. That experience is what got me interested in programming in general.</p>

<h5 id="leanpub-auto-did-this-push-you-to-start-taking-programming-classes-at-duke-as-well">Did this push you to start taking programming classes at Duke as well?</h5>

<p>Yes.I took Duke’s introductory courses in computer science and I learned how to program in C++. I never really studied algorithms or operating systems or other things computer science majors study. In my professional career, I’ve discovered all of these huge and embarrassing gaps in my computer science knowledge, usually during job interviews.</p>

<p>At the start of my senior year, I decided to put the academic career on hold and go get a real job. I was interviewing with some startups and accepted an offer, but it was rescinded as part of the whole dotcom implosion thing that was happening in late 2000/early 2001. I wasn’t alone here, and Duke’s recruiting office was really great in helping folks find jobs elsewhere. I ended up getting a job in IBM’s Austin office. My first day was June 17th, 2001, and the week after I started, IBM announced a hiring freeze, so I suppose I slid in just under the wire.</p>

<p>IBM Austin had a hardware group that does chip design and system bring-up, which is where you hack early stage hardware to get around all of the bugs so that you can load and run an operating system. I was managing a MySQL database of test data for microprocessors. All in all, it was 15 gigabytes of data, which at the time seemed enormous, but now seems laughable– my phone has more storage than that whole volume of test data! I was building dashboards and running statistical analyses of machine performance and chip performance; trying to predict how fast a chip would clock based on a number of measurements that were made during wafer fabrication. It was classic statistics, classic data analysis, and just learning how to program. To be honest, it was pretty dull, and I got bored with it fairly quickly. I also have this masochistic approach to achievement, and so sometimes I like to do things just to prove that I can do them, regardless of whether or not it’s actually a good idea or not. So in that vein, I applied for and got into the Operations Research (OR) graduate program at the University of Texas at Austin (UT). UT didn’t have a statistics department, which is what I actually wanted to study, and OR was as close as I could get without having to leave Austin, which was just a really great place to be at the time.</p>

<p>As an undergraduate, I didn’t take any statistics courses at all until my very last semester, which was really my blow-off semester. It was when I took music appreciation, introduction to logic (oddly enough, a philosophy course), and introduction to statistics. Intro stats was actually a requirement to graduate, but I felt like it was beneath me after all of the abstract algebra and hyperbolic partial differential equations. And the funny thing is that I completely fell in love with it. A lot of the philosophy and neuroscience stuff I was into were things involving epistemology and symbolic reasoning, about understanding how we can say that we *know *something to be true.</p>

<h5 id="leanpub-auto-and-statistics-is-about-quantifying-uncertainty-and-what-we-cant-know">And statistics is about quantifying uncertainty and what we can’t know.</h5>

<p>Precisely! It is the quantification of what is knowable and what is not. Here is your data, what can you say that you know? It was deeply appealing to me. Personally, that kind of stuff really winds my clock. I loved statistics. Fast-forward a couple of years, and now I’m at UT and taking a full graduate course load in OR. I did three courses a semester for two years to get my Master’s degree, while simultaneously working at IBM. That was a terrible idea. It was absolutely horrible. I had no life.</p>

<h5 id="leanpub-auto-it-sounds-like-you-learned-how-to-do-the-relatively-simple-statistical-analysis-at-ibm-and-thought-i-want-to-expand-my-intellectual-horizon">It sounds like you learned how to do the relatively simple statistical analysis at IBM and thought, “I want to expand my intellectual horizon.”</h5>

<p>Very much so. My IBM introductory software engineering job was pretty easy, and I wrote a bunch of crazy Perl scripts that more-or-less automated my job. But I had this kind of residual itch from my statistics class and from seeing that statistics was actually pretty useful to people in the real world. My mental model at the time was that if you wanted to learn more about something, school was a pretty good place to do it, and so I went back to school.</p>

<p>A semester into my graduate program, I made another switch: I changed teams at IBM to be able to do some “real” programming, not just dashboards and Perl scripts. I switched to a team did very low level firmware programming in C++. This was basically writing firmware for hardware systems that didn’t fully work yet because they haven’t debugged all the circuits. I was working as part of a team and learning to use things like source control, write tests, all of those good practices that I never learned in school. More than anything though, the most useful skill I learned was how to debug black box systems. I was trying to run firmware on a piece of hardware that didn’t really work yet, and my job was to figure out a way to make that software run by hacking around whatever bugs I came across in the hardware itself. I didn’t know anything about hardware. I still don’t know anything about hardware. I can’t even program a VCR. I think that I became a software engineer because I can’t understand any system that I didn’t design myself.</p>

<p>Anyway, the black box system is a piece of hardware that doesn’t work. I would give it an input, and it would not give me an output. I had to figure out a hack, some sequence of commands, that would cause this piece of hardware to begin communicating with the rest of the system. And this skill, the art of debugging something that you don’t understand at all, is maybe the most useful thing I learned there.</p>

<h5 id="leanpub-auto-what-did-you-end-up-learning-through-this-experience-of-debugging-black-box-systems">What did you end up learning through this experience of debugging black box systems?</h5>

<p>I don’t think there’s any secret to it: I’m obsessive. I was one of those kids that played with Legos for five or six hours straight. I’m still pretty much like that. I was born in 1979, so I’m borderline millennial. It is unacceptable to me for a computer system to not do what I want it to do. I was willing to beat on the black box hardware for whatever amount of time was required to make it do what I wanted.</p>

<p>I’ve had a few instances in my life where I have worked on a very satisfying problem. A satisfying problem is one where your technical skills are good, but the problem is just a little bit too hard for you. You’re trying to do something slightly more difficult than what you already know how to do, and that is great, great feeling. I can lose myself in those kinds of problems. That’s typically when my personal relationships tend to fall apart, because I’m not really paying attention to anything else.</p>

<p>There was this trend for awhile in data science job interviews to have candidates analyze real datasets during the interview. I’m a huge fan of this practice. I had one job interview where they gave me a problem and a dataset and two whole hours of quiet time to just sit and do data analysis. It was maybe the happiest two hours of my entire year. I should do more job interviews just so I can do that.</p>

<h5 id="leanpub-auto-you-had-mentioned-how-at-one-point-of-your-college-career-you-were-burned-out-from-academia-one-of-the-hallmarks-of-academia-seems-to-be-that-once-youve-reached-a-certain-point-you-have-the-opportunity-to-spend-all-of-your-time-obsessing-over-an-open-problem-given-that-your-personality-type-seems-to-fit-that-role-why-wasnt-academia-appealing-to-you-anymore">You had mentioned how, at one point of your college career, you were burned out from academia. One of the hallmarks of academia seems to be that once you’ve reached a certain point, you have the opportunity to spend all of your time obsessing over an open problem. Given that your personality type seems to fit that role, why wasn’t academia appealing to you anymore?</h5>

<p>As a pseudo-millennial, I’m not just entitled, I’m impatient. I don’t think the requirements of academia were appealing anymore; there were large sets of things I would have to complete before I reached that point of being able to obsess over an open problem.</p>

<p>Once you’re a graduate student, you work for a professor on that professor’s grant, doing largely what the grant says you’re supposed to do. Then, you do a post-doctorate for a couple of years and become an assistant professor. You go through that horror, and, after 10 years, you get tenure. It’s a really long time to wait before you can have that promise of obsessive problem solving fulfilled. Even then, I don’t feel the promise is fulfilled because you have to spend a lot of time working on grant proposals and managing your graduate students and postdocs.</p>

<p>Now I’m 35 years old. Time-wise, I may be roughly at that point in my career now. I have a really great job where I get to do what I want and do, whatever is interesting to me. But it’s also a be-careful-what-you-wish-for situation. The freedom to work on whatever you think is interesting is stressful because there’s no one else you can blame if you’re not working on the right thing or if you miss a technology shift that has a profound impact.</p>

<p>Amr Awadallah (Cloudera’s CTO) wrote a blog post about what a chief technology officer does. He was comparing the CTO’s performance to CFO’s performance. The CFO is not responsible for making the sales numbers every quarter, but if there is a big surprise miss, the CFO gets fired. Similarly, the CTO is not responsible for shipping products on time, that’s what the VP of Engineering is for. But if the CTO misses a major technology shift, he or she gets fired.</p>

<p>I have a CTO-kind of job right now. I am free in my job to think about analytics, the future of data science, what exactly is coming down the pike. If I miss something, I should be fired because that miss could have profoundly negative consequences for Cloudera.</p>

<p>There’s tremendous pressure that comes with that freedom. Now that I get that, it’s slightly horrifying. I have a fair amount of anxiety about it.</p>

<h5 id="leanpub-auto-can-you-talk-a-little-bit-more-about-what-happened-in-between-ibm-and-cloudera-how-did-you-get-to-this-point">Can you talk a little bit more about what happened in between IBM and Cloudera? How did you get to this point?</h5>

<p>We skipped the part of graduate school when I was taking a class in price optimization. One of my professors worked with a local startup in Austin called Zilliant. I wanted a job focused on operations research, so my professor hired me to work as a data analyst there. There, I went back to SAS and R and started doing data analysis and building models for things like market segmentation and price elasticity.</p>

<p>When you come from academia, you tend to think the world is more interesting than it actually is, or that a problem is more complex than it is. The reason that price optimization hasn’t really taken off as a software discipline is because the primary pricing problem for Fortune 500 companies is to sell things for more money than it costs to make them. If they don’t know how much it costs to make things, they can’t know how much they should sell those things for to ensure that they make a profit. It’s not rocket science. You don’t need a data scientist to do that. You just need good reporting.</p>

<h5 id="leanpub-auto-why-is-it-that-companies-dont-know-this-bit-of-crucial-information">Why is it that companies don’t know this bit of crucial information?</h5>

<p>It seems like a fundamental component, and yet many of them do not actually know. The problem is incentives. The person who is selling the deal, the salesman, is going to get a commission, and his or her income depends on the commission. They’re putting together a package of things that are going to be sold as a part of the deal. There’s going to be some materials and professional services, that’s just text and contracts. These contracts get read and improved, but no one necessarily understands how much it’s going to cost to fulfill these contracts. There’s way too much variance. And people have a tendency to be very optimistic. They don’t think they’re going to have conflicts. They don’t think they’re going to have errors. They don’t think there are going to be hurricanes.</p>

<p>These aren’t trivial problems, but they’re also not the kind of problems that are amenable to the complicated data analysis techniques that you typically learn in graduate school. They’re very different kinds of problems.</p>

<p>They are simple problems. They’re simple but not easy. Losing weight is simple but not easy. Most industrial problems are simple but not easy.</p>

<h5 id="leanpub-auto-so-after-zilliant-did-you-make-it-your-goal-to-attack-the-industry-problems">So after Zilliant, did you make it your goal to attack the industry problems?</h5>

<p>I like to be useful more than anything. I like to solve people’s problems. I like to be helpful. I’m a helpful person by nature. I enjoy abstractions. I enjoy art and weird stuff aesthetically, but I would rather have my day-to-day work be more focused on people’s problems and making their lives better. The beauty and the theory are never so appealing that they manage to draw me away from the real problems.</p>

<h5 id="leanpub-auto-you-worked-at-a-bunch-of-different-startups-before-google-were-you-solving-different-initial-problems-at-these-startups-what-prompted-the-shift-to-google">You worked at a bunch of different startups before Google. Were you solving different initial problems at these startups? What prompted the shift to Google?</h5>

<p>It really took me forever to leave Austin. I could make a list of all of the bad financial decisions that I made because I was too afraid to leave Austin. I had a job offer from Google to be an engineering analyst, which I turned down in 2005. I turned down a data science job at Facebook in 2007. I try not to think about that one too much.</p>

<p>The thing that finally got me to San Francisco was auction theory. I was working on my PhD at UT and had taken some classes in game theory and mechanism design, and we covered auction theory. I absolutely loved it; it was beautiful math that could also be used to create socially optimal outcomes. I was really curious about how auctions worked in the real world, but there weren’t really any places in Austin where I could go design auctions for a living. I was fortunate that I had kept in touch with Diane Tang, who had tried to hire me at Google back in 2005 and was running Google’s ads quality team which was responsible for the ad auction. She’s now Google’s first and only female Google Fellow, but at the time, she was just my friend who hired me to go to Google and work on auctions full time. She has been an amazing mentor to me, one of the most important people in my career.</p>

<h5 id="leanpub-auto-what-was-it-like-on-googles-ad-quality-team-was-that-a-confluence-of-smart-people-who-had-studied-auction-theory-as-well-and-then-implemented-it-in-the-real-world">What was it like on Google’s ad quality team? Was that a confluence of smart people who had studied auction theory as well and then implemented it in the real world?</h5>

<p>I think the thing to know about Google is that it is smart software engineers with no specific expertise designed most of the core systems. Eric Veach, who had a PhD in computer graphics but no machine learning experience, designed Google’s original machine learning system. Eric was tasked with the problem, read a book, and came up with a wholly new solution.</p>

<p>I remember when I first got to Google and read about how that system worked. It was the most brilliant and unique solution to the world’s first truly large-scale machine learning problem. His original algorithm was really clever and I’ve never seen anything like it published anywhere, and I don’t think we ever will because, of course, Google has now gone on to even more advanced machine learning systems.</p>

<p>Eric was also the person who designed Google’s original auction algorithm. Again, Eric is a graphics guy, he’s not an auction theorist. So he read a book about second-price auctions, and he came up with this very simple generalization that is called the GSP, the generalized second price auction.</p>

<p>I worked on a number of auction-related features and launches at Google. I really enjoyed it, but at the end of the day, the auction can only be as complicated as the understanding of the auction participants. Advertisers are wonderful, but they’re still just people, while the really interesting bidding strategies and auction models are so complicated and computationally intensive that they require serious software engineering chops just to participate in them. It wasn’t in Google’s interest to have an auction that was so complicated that no one besides auction theorists could appreciate it.</p>

<h5 id="leanpub-auto-this-seems-to-be-emblematic-of-one-of-the-differences-between-academia-and-industry-in-academia-youre-focused-on-getting-the-optimal-solution-in-the-real-world-you-find-that-your-implementation-priority-queue-is-dominated-not-only-by-optimality-but-also-by-feasibility-and-expedience-was-this-shift-hard-for-you-to-see-and-interact-with">This seems to be emblematic of one of the differences between academia and industry. In academia you’re focused on getting the optimal solution. In the real world, you find that your implementation priority queue is dominated not only by optimality but also by feasibility and expedience. Was this shift hard for you to see and interact with?</h5>

<p>I don’t think so. I was fairly lucky. Most of my graduate work in operations research was working on impossible problems. Operations research consists primarily of very hard problems where you cannot find the optimal answer. The job is to do the best you can, and I actually love those kinds of problems because the expectations are low. If the problem is impossible and you are able to do anything even remotely close to a good solution, it’s kind of amazing.</p>

<h5 id="leanpub-auto-there-is-a-joke-if-you-have-a-np-hard-problem-and-you-make-it-slightly-better-your-solution-is-exponentially-better">There is a joke: “If you have a NP-hard problem and you make it slightly better, your solution is exponentially better”?</h5>

<p>I could not agree more. It was a good headspace to be in. Operations Research is a very practically oriented science and academic discipline, so transitioning to that industry mindset was not one of my problems.</p>

<h5 id="leanpub-auto-your-story-illustrates-that-to-be-a-great-data-scientist-you-have-to-be-slightly-masochistic-you-have-to-be-willing-to-go-out-of-your-way-to-be-in-areas-where-youre-the-least-skilled-person-in-that-domain-and-programming-what-was-your-development-like-as-a-programmer">Your story illustrates that to be a great data scientist, you have to be slightly masochistic. You have to be willing to go out of your way to be in areas where you’re the least skilled person in that domain and programming. What was your development like as a programmer?</h5>

<p>I may not be able to give myself too much credit. I was a pretty good programmer in school with algorithms and optimization routines, but I wasn’t really a great team programmer. Even at IBM, although I was on a team of four developers, we really didn’t have to work all that closely together. The structure of the software was already well-defined and the interfaces were clear.</p>

<p>When I was at Zilliant, the company decided to redo their pricing engine. The data analysts got together and wrote a spec about what they wanted the pricing engine to do. It required some domain expertise, and of course I had programmed for many years at IBM. So I was tasked with doing the implementation, but it quickly became clear to basically everyone that I did not know how to build a real software product from scratch.</p>

<p>I give the managers at Zilliant a lot of credit for what they did next: they apprenticed me to a much more senior developer, John Adair, who is another great mentor and friend. For three months, he implemented the spec, and I unit tested it. I wrote unit tests and integration tests for his code every single day for three months.</p>

<p>It was the most useful learning experience of my professional life, because John writes beautiful code. When I describe this experience to people, they always make a face, because it sounds tedious and awful and lots of developers hate writing tests. But when it’s your job, and you’re measuring yourself the whole day, it can actually be fun. And I was just learning so much about how you actually build systems from scratch.</p>

<p>I was somewhat involved in writing the spec for what the software was going to do, so I knew both the spec and the software very well. What was interesting was was getting to see how to write code that is designed to be testable. John and I went through a few refactorings over the course of the project, but the QA team only found like two bugs when the system was tested. It was the best software I’ve ever been a part of. It was beautiful code.</p>

<p>After I left Zilliant, I did a brief stop at Indeed, the job search engine. There, I was a statistician. I wrote some code, but I was primarily there in my capacity as a statistician. And when I left Indeed to go to Google, I was also hired as a statistician. For whatever reason though, when I actually got in the door at Google, all I did was write code. There was just so much great code everywhere that you could read and use and learn from. After nine months at Google, the company changed my job title from statistician to software engineer, and even gave me a promotion. I’ve always felt a little shady about that, because there’s basically no way I could have ever passed a Google software engineering interview.</p>

<p>For someone like me, I am really just a good mimic, and I can pick things up pretty quickly. Being inside Google with so much good code, was an absolutely amazing experience. I am 20 times better as a software engineer just because of my time at Google and seeing what the people who are really good do. It was an unparalleled experience, absolutely amazing.</p>

<h5 id="leanpub-auto-can-you-give-us-specific-examples-of-how-you-did-that-do-you-go-to-the-people-that-wrote-code-understand-the-problem-from-them-see-how-you-would-implement-it-and-read-it-what-was-your-procedure-for-learning-all-that-you-did">Can you give us specific examples of how you did that? Do you go to the people that wrote code, understand the problem from them, see how you would implement it and read it? What was your procedure for learning all that you did?</h5>

<p>I don’t know how other places do it, but Google imposes it on you. They force you to code the way Google codes. Readability standards are a big deal. You have to get readability in any language that you want to be able to commit to Google’s source code repository, or have your code approved by someone who does have readability. To get readability, you have to write a large chunk in a way that adheres to Google’s coding style, and the process of readability reviews is basically hazing for software engineers. I will never forget my readability review for Sawzall.</p>

<p>I was writing some code to analyze the ad logs, studying correlations between advertiser bids and various machine learning probabilities that we were calculating. I wrote some basic correlation routines and then submitted them to the core Sawzall libraries, and it turned out that my code reviewer was Rob Pike. If you don’t know Rob, he’s an old school AT&amp;T Labs guy. He wrote Plan 9, and he’s the creator of the Go programming language. He also created Sawzall. He’s also the most pedantic code reviewer I had at Google, and I’m sure that he will consider that a compliment. I think I went through 26 code revisions during that review with him, and it was absolutely awful. It was so bad that I really thought hard about quitting. So, so, so many nitpicky comments. I think that was a great thing about Google, they tortured me into becoming a better programmer by forcing me to think hard about all of these little decisions. No pain, no gain.</p>

<h5 id="leanpub-auto-that-seems-to-be-one-of-the-nice-things-about-being-a-data-scientist-its-at-the-intersection-of-many-fields-so-when-youre-in-a-particular-field-you-can-humble-yourself-by-not-thinking-of-yourself-as-a-practitioner-of-that-field-and-say-what-can-i-learn-from-this-person-as-they-are-a-practitioner-of-this-field">That seems to be one of the nice things about being a data scientist. It’s at the intersection of many fields, so when you’re in a particular field, you can humble yourself by not thinking of yourself as a practitioner of that field and say, “What can I learn from this person as they are a practitioner of this field?”</h5>

<p>I think that is a big part of your job description as a data scientist. The reality is that these things are never one-way streets. For every software engineer who gave me a scathing code review, another one would come to me later with a data analysis problem, because they knew me as a statistician who spoke their language and could explain things to them.</p>

<p>It’s hard to humble yourself, but keep in mind that it almost always comes back around in a positive way. It’s good for your career to come in and be seen as an expert in something who knows how to communicate their expertise.</p>

<h5 id="leanpub-auto-how-did-you-deal-with-the-transition-between-a-large-company-like-google-where-theres-so-much-institutional-knowledge-to-draw-upon-and-a-startup-like-cloudera">How did you deal with the transition between a large company like Google, where there’s so much institutional knowledge to draw upon, and a startup like Cloudera?</h5>

<p>There are lots of things I miss at Google. I miss the people. I miss the food. I miss the toys. They had a lot of great stuff at Google. To the extent that we have a product strategy on the data science team at Cloudera, it’s to take stuff that we loved at Google and create open source versions of it. That’s all there is to it. It’s the easiest product management strategy in the world. Know what you like and try to improve upon it.</p>

<p>When I got to Cloudera, it was roughly 85 people. It wasn’t a startup, but it was pretty small. I was like, “Hey everybody, I’m the new director of data science. What should I be working on?” No one had any idea, and I didn’t have any idea either. It wasn’t entirely clear to me what I was hired to do. I had a couple of days of tremendous anxiety about that. I was completely useless. At Google, I had 150 emails a day from people who needed stuff from me. Here, I could hear crickets chirping. It’s that anxiety-inducing freedom we talked about earlier.</p>

<p>So my job at Cloudera was to figure out what I could do that would be useful. I spent a lot of time talking to customers, and I still do a lot of that. I give them advice about building data science teams or about particular approaches they can take to solving different types of problems.</p>

<p>I also started working on problems that customers talked about and various customer engagements that seemed interesting and useful. I was also new to the Hadoop stack, and so a lot of it was just learning what was out there and how things worked. I remember one project where I was building a model for detecting adverse drug events using an algorithm that was created pre-MapReduce but that was really a perfectly MapReduce-able problem. That was the first useful thing I did, and I know that because Mike Olson, one of our co-founders, presented the results of my analysis as a five-minute quick hit presentation at a conference and we got a lot of nice press and Twitter coverage for it.</p>

<p>A little later, I was working on a problem that required processing lots of seismic imaging data, which is time series data oil and gas companies analyze to try to figure out where oil and natural gas deposits are located under the earth. That was the first time I really missed FlumeJava. It was the perfect tool to solve the problem I was working on, and so I rewrote enough of FlumeJava to be able to solve my problem.</p>

<p>That process brought me back to my black-box debugging days at IBM. When I was at Google, I had used FlumeJava to write data pipelines, so I knew what the APIs looked like, but I didn’t really understand how it worked under the covers, only how it worked conceptually. The FlumeJava team had published a paper about the system, and that was tremendously helpful, but there was still this process of sitting down and saying to myself, “okay, I know the API worked like this. I don’t know why it worked like that, so let’s see if we can sit down and figure out what had to be going on so that this thing will work.”</p>

<p>It really took three times to create the FlumeJava clone that eventually became Crunch. The first time I wrote it, I really coded myself into a corner; I made some design mistakes that I just couldn’t unravel. So I started over, but I ended up creating this ridiculously over-engineered monstrosity, and I wasn’t really getting closer to being able to solve my original seismic data analysis problem. So by the time I started over again, I really needed to get the thing to work quickly, and fortunately I had learned enough from the first two attempts to get something that basically worked together in a week.</p>

<p>I probably should have been too ashamed of what I had created to open-source it, but thanks to my time at Google, any sort of ego I had about the quality of my code was basically gone, and I was more than happy to put it out there for everyone so that other people would be able to work on it and improve it over time. Just because I’m not the best programmer in the world doesn’t mean I can’t contribute useful things, and the community that has sprung up around Crunch is something I am incredibly proud to be a part of.</p>

<h5 id="leanpub-auto-you-wrote-a-blog-post-about-building-crunch-and-then-having-someone-contribute-to-the-open-source-project-as-this-amazing-moment-can-you-talk-a-bit-more-about-what-that-was-like">You wrote a blog post about building Crunch, and then having someone contribute to the open source project, as this amazing moment. Can you talk a bit more about what that was like?</h5>

<p>It was about understanding the complicated software written, finding a non-trivial bug, and improving it. I like literature a lot. I like David Foster Wallace, and I’m wearing my favorite David Foster Wallace t-shirt. It the motto of the Enfield Tennis Academy in Latin. It translates to, “They can kill you, but the legalities of eating your corpse are quite a bit dicier.”</p>

<p>Wallace writes a lot about loneliness. There’s a character in Infinite Jest called Madame Psychosis which is a reference to metempsychosis. It is a notion of the transmigration of souls from Greek literature, that’s like a John Malkovich situation of being picked up and stuck in someone else’s head. Gabriel doing that fix was like metempsychosis because I put some aspect of myself into this code and he improved it. That was sublime. I was very lucky.</p>
</div>
</body>
</html>
