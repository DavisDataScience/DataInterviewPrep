An algorithm is simply a procedure or formula for solving a problem

How do we analyze algorithms and compare them?
def sum1(n):
	final_sum = 0
	for x in range(n+1):
		final_sum += x
	return final_sum

sum1(10) -> 55
	That is the iterative solution

def sum2(n):
	return (n*(n+1))/2
sum2(10) -> 55

Time it!
sum2 is faster, but we want to use an objective method, hardware independent

Big O!
time to run AND the space it takes up in memory

Compare the number of assignments/operations 
	sum1 will assign the variables N+1 times

Formally, Big O describes how quickly runtime will grow relative to the input, as the input gets arbitrarily large

Big O  | Name
-----------------
1 	   | Constant
log(n) | Logarithmic
n      | Linear
nlog(n)| Log Linear
n^2    | Quadratic
n^3    | Cubic
2^n    | Exponential

